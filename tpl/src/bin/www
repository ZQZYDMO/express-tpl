#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
//var debug = require('debug')('first-app:server');
const http = require('http');
const config = require('../config');
const slogger = config.slogger;
const alarm = config.alarm;
const later = require('later');
const {doScheduleTask} = require('../schedules');
const {checkVersionCache} = require('../services/version_service')

later.date.localTime();
const cron = '2 2 * * ? *';
//const s = later.parse.cron(cron);
// const playbackService = require('../services/playback_service');
// const timer = later.setInterval(playbackService.schedule, s);

/**
 * Get port from environment and store in Express.
 */

var port = app.get('port');


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
// 执行定时任务
doScheduleTask(cron);
// 检查缓存版本信息数据
checkVersionCache();

process.on('uncaughtException', function(err) {
    try {
        slogger.error('出现重大异常，重启当前进程',err);
    } catch(e) {
        console.error('请检查日志文件是否存在',e);
    }
    if (process.env.DEBUG_LOCAL === 'true') {
        console.log('kill current proccess:'+process.pid);
        return process.exit();
    }
    alarm.sendAll(err,function(err) {
      if (err) {
          console.error('发送警告数据时报错',err);
      }
      console.log('kill current proccess:'+process.pid);
      process.exit();
    });
    
//    timer.clear();

});
